#include <iostream>
#include <vector>

class Section {
public:
    std::vector<uint8_t> content;
    Section(std::vector<uint8_t> content) : content(content) {};
};

class Binary {
public:
    uint8_t *content;
};

Binary vuln(Section user_section) {

    Binary bin;

    std::vector<uint8_t> section_content = user_section.content;
    uint8_t* content = static_cast<uint8_t*>(malloc(section_content.size() * sizeof(uint8_t)));

    std::move(
        std::begin(section_content),
        std::end(section_content),
        content
    );

    bin.content = content;
    return bin;
}

void prepare() {/* remain some leakable address in memory */
    void *ptr[7];
    for(ssize_t i = 0; i < 7; i++)
        ptr[i] = malloc(0);
    for(ssize_t i = 0; i < 7; i++)
        free(ptr[i]);
}

void use_later(Binary bin) {/* use subsequently. remember close ASLR */

    fprintf(stdout, "content[0..3]: %02x %02x %02x\n",
        bin.content[0], bin.content[1], bin.content[2]);
    
}
int main(int argc, char** argv)
{
    prepare();
    std::vector<uint8_t> v;
    Section user {v};

    use_later(vuln(user));
    return 0;
}
