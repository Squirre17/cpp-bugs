#include <iostream>
#include <vector>
#include <map>
using std::cout;
using std::endl;

class SegmentCommand {
  public:
    uint64_t file_offset_;
    uint64_t file_size_;

    uint64_t file_offset() const {
        return this->file_offset_;
    }
    uint64_t file_size() const {
        return this->file_size_;
    }
};

class Binary {
  public:
    const SegmentCommand* segment_from_offset(
        std::map<uint64_t, SegmentCommand*> offset_seg,
        uint64_t offset
    ) const {
        /*  ** IMPORTANT HERE **
            if I pass a empty map, std::begin will point to the position after the last element
            this is a attack surface I think.
            so here it_begin is {0, nullptr} which don't be rejected oo crash.
         */
        const auto it_begin = std::begin(offset_seg);
        if (offset < it_begin->first) {
            cout << "rejected" << endl;
            return nullptr;
        }

        /* return iter equal or great than key */
        auto it = offset_seg.lower_bound(offset);
        if (it->first == offset || it == it_begin) { /* Satisfy the second condition */

            cout << "deref nullptr now" << endl;

            SegmentCommand* seg = it->second;// null
            if (seg->file_offset() <= offset && 
                offset < (seg->file_offset() + seg->file_size())) {
                return seg;
            }

        }


    }
};

int main(int argc, char** argv)
{
    std::map<uint64_t, SegmentCommand*> user_control;// assume user can control this data struct
    Binary bin {};
    bin.segment_from_offset(user_control, 1);
    return 0;
}
